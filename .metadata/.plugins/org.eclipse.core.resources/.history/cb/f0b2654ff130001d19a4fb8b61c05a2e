package com.fastcampus.ch2;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;

import org.springframework.ui.Model;
import org.springframework.validation.support.BindingAwareModelMap;

public class MethodCall2 {
	public static void main(String[] args)throws Exception{
		
		//YoilTellerMVC 객체 생성
		Class clazz = Class.forName("com.fastcampus.ch2.YoilTellerMVC");
		Object obj = clazz.newInstance();
		
		//main 메서드의 정보를 가져온다
		Method main = clazz.getDeclaredMethod("main", int.class,int.class,Model.class);
		
		//model 생성
		Model model = new BindingAwareModelMap();//모델만들기 모델구현체 :BindingAwareModelMap
		System.out.println("[before]model="+model);
		
		//메인메서드 호출 invoke 사용 obj객체에 대해서 main 메서드 호출
		// new Object[] {2021,10,1,model});매개변수 >>
		//String viewName = obj.main(2021,10,1,model); //아래와 동일
		String viewName = (String)main.invoke(obj, new Object[] {2021,10,1,model});
		System.out.println("viewName"+viewName);
		
		System.out.println("[after]model"+model);
		
		//텍스트 파일을 이용한 rendering
		render(model,viewName);
	}
	
	static void render(Model model,String viewName) throws IOException{
		String result ="";
		
		//뷰 내용을 한줄씩 읽어서 하나의 문자열로 만든다
		Scanner sc = new Scanner(new File("src/main/webapp/WEB-INF/views/"+viewName+".jsp"),"utf-8");
		
		while(sc.hasNextLine()) //한줄씩 읽어 하나의 문자열로 만든다
			result += sc.nextLine()+System.lineSeparator();
		
		//model을 map 으로 변환
		Map map = model.asMap();
		
		//key를 하나씩 읽어서 template의 ${key}를 value 바꾼다.
		Iterator it = map.keySet().iterator();
		
		while(it.hasNext()) {
			String key = (String)it.next();
			//replace()로 키를 밸류 치환한다.
			result = result.replace("${"+key+"}", ""+map.get(key));
			
			
		}
		//렌더링결과를 출력한다
		System.out.println(result);
	}
}
